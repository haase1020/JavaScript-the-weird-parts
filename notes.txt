# key words

1. syntax parser: a program that reads your code and determines what it does and if
   its grammer is valid.
   ->your code isn't magic. Someone else wrote a program to translate it for the computer.
2. lexical environment: where something sits physically in the code you write
3. execution context: a wrapper to help manage the code that is running.
4. name/value pair: a name which maps to a unique value.
5. object: a collection of name value pairs
6. hoisting: setup memory space for variables and functions.
7. all variables start as 'undefined'
8. single threaded: one command at a time (under the hood of the browser, maybe not).
9. synchronous: one at a time (and in order...)
10. invocation: running a function (in JS, by using parenthesis())
11. variable environment: where the variables live
12. Scope: where a variable is available in your code.
13. 'let': allows JS engine to use block scoping. (ES6)
14. async: more than one at a time
15. execution stack (when empty, looks to event queue)
16. event queue
17. dynamic typing: you don't tell the engine what type of data a variable holds, it figures it out while your code is running
(opposite is static typing)
18. primitive type: a type of data that represents a single value (undefined, null, boolean, number, string, symbol(es6))
19. operator: a special function that is syntactically (written) differently (generally, operators take two parameters and return one result)
20. operator precendence: which operator function gets called first (higher precendence wins).
21. associativity: what order operator functions get called in: left to right or right to left (when functions have the same precedence)
22. coercion: converting a value from one type to another (this happens often in JS because it's dynamically typed)


## other notes

- you have "this" and "window" available in execution context (global) -> global object is window object called "this" -> at global level these 2 things are equal
- "global" means not inside a function
- execution context -> global object/ 'this'/ 'outer environment -> your code
- learn how things work under the hood!
